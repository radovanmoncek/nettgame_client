package cz.radovanmoncek.client.ship.tables;// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 *Reponse to players
 */
@SuppressWarnings("unused")
public final class GameState extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static GameState getRootAsGameState(ByteBuffer _bb) { return getRootAsGameState(_bb, new GameState()); }
  public static GameState getRootAsGameState(ByteBuffer _bb, GameState obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public GameState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Game game() { return game(new Game()); }
  public Game game(Game obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Player player1() { return player1(new Player()); }
  public Player player1(Player obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Player player2() { return player2(new Player()); }
  public Player player2(Player obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createGameState(FlatBufferBuilder builder,
      int gameOffset,
      int player1Offset,
      int player2Offset) {
    builder.startTable(3);
    GameState.addPlayer2(builder, player2Offset);
    GameState.addPlayer1(builder, player1Offset);
    GameState.addGame(builder, gameOffset);
    return GameState.endGameState(builder);
  }

  public static void startGameState(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addGame(FlatBufferBuilder builder, int gameOffset) { builder.addOffset(0, gameOffset, 0); }
  public static void addPlayer1(FlatBufferBuilder builder, int player1Offset) { builder.addOffset(1, player1Offset, 0); }
  public static void addPlayer2(FlatBufferBuilder builder, int player2Offset) { builder.addOffset(2, player2Offset, 0); }
  public static int endGameState(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public GameState get(int j) { return get(new GameState(), j); }
    public GameState get(GameState obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

