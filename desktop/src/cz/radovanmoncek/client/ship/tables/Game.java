package cz.radovanmoncek.client.ship.tables;// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 *Conmposite Game metadata
 */
@SuppressWarnings("unused")
public final class Game extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static Game getRootAsGame(ByteBuffer _bb) { return getRootAsGame(_bb, new Game()); }
  public static Game getRootAsGame(ByteBuffer _bb, Game obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Game __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte status() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public String gameCode() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer gameCodeAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer gameCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createGame(FlatBufferBuilder builder,
      byte status,
      int gameCodeOffset) {
    builder.startTable(2);
    Game.addGameCode(builder, gameCodeOffset);
    Game.addStatus(builder, status);
    return Game.endGame(builder);
  }

  public static void startGame(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addStatus(FlatBufferBuilder builder, byte status) { builder.addByte(0, status, 0); }
  public static void addGameCode(FlatBufferBuilder builder, int gameCodeOffset) { builder.addOffset(1, gameCodeOffset, 0); }
  public static int endGame(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Game get(int j) { return get(new Game(), j); }
    public Game get(Game obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}
